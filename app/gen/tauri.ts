// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/

export const commands = {
    /**
     * Emit error message back to frontend
     */
    async emitError(error: Error): Promise<void> {
        await TAURI_INVOKE("emit_error", { error });
    },
    /**
     * Read graph from file and return serde json value
     *
     * # Errors
     * If file cannot be read
     */
    async readGraph(filePath: string): Promise<Result<JsonValue, Error>> {
        try {
            return {
                status: "ok",
                data: await TAURI_INVOKE("read_graph", { filePath }),
            };
        } catch (e) {
            if (e instanceof Error) throw e;
            else return { status: "error", error: e as any };
        }
    },
    /**
     * Save graph to provided path
     *
     * # Errors
     * If file cannot be saved at provided path
     */
    async saveGraph(
        filePath: string,
        graph: JsonValue,
    ): Promise<Result<null, Error>> {
        try {
            return {
                status: "ok",
                data: await TAURI_INVOKE("save_graph", { filePath, graph }),
            };
        } catch (e) {
            if (e instanceof Error) throw e;
            else return { status: "error", error: e as any };
        }
    },
    /**
     * Set title for window to provided file name
     *
     * # Errors
     * if file name cannot be added to title
     */
    async addFileNameToTitle(
        fileName: string | null,
    ): Promise<Result<null, Error>> {
        try {
            return {
                status: "ok",
                data: await TAURI_INVOKE("add_file_name_to_title", {
                    fileName,
                }),
            };
        } catch (e) {
            if (e instanceof Error) throw e;
            else return { status: "error", error: e as any };
        }
    },
};

/** user-defined events **/

export const events = __makeEvents__<{
    errorMessage: ErrorMessage;
    newGraph: NewGraph;
    openGraph: OpenGraph;
    saveAsGraph: SaveAsGraph;
    saveGraph: SaveGraph;
}>({
    errorMessage: "error-message",
    newGraph: "new-graph",
    openGraph: "open-graph",
    saveAsGraph: "save-as-graph",
    saveGraph: "save-graph",
});

/** user-defined constants **/

/** user-defined types **/

/**
 * Struct representing error
 */
export type Error = {
    /**
     * main error message
     */
    message: string;
    /**
     * error
     */
    errors: string[];
};
/**
 * Event to sent a error message
 */
export type ErrorMessage = Error;
export type JsonValue =
    | null
    | boolean
    | number
    | string
    | JsonValue[]
    | { [key in string]: JsonValue };
/**
 * Event for new graph
 */
export type NewGraph = null;
/**
 * Event for open graph
 */
export type OpenGraph = null;
/**
 * Event for save as graph
 */
export type SaveAsGraph = null;
/**
 * Event for save graph
 */
export type SaveGraph = null;

/** tauri-specta globals **/

import {
    invoke as TAURI_INVOKE,
    Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
    listen: (
        cb: TAURI_API_EVENT.EventCallback<T>,
    ) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
    once: (
        cb: TAURI_API_EVENT.EventCallback<T>,
    ) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
    emit: null extends T
        ? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
        : (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
    | { status: "ok"; data: T }
    | { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
    mappings: Record<keyof T, string>,
) {
    return new Proxy(
        {} as unknown as {
            [K in keyof T]: __EventObj__<T[K]> & {
                (handle: __WebviewWindow__): __EventObj__<T[K]>;
            };
        },
        {
            get: (_, event) => {
                const name = mappings[event as keyof T];

                return new Proxy((() => {}) as any, {
                    apply: (_, __, [window]: [__WebviewWindow__]) => ({
                        listen: (arg: any) => window.listen(name, arg),
                        once: (arg: any) => window.once(name, arg),
                        emit: (arg: any) => window.emit(name, arg),
                    }),
                    get: (_, command: keyof __EventObj__<any>) => {
                        switch (command) {
                            case "listen":
                                return (arg: any) =>
                                    TAURI_API_EVENT.listen(name, arg);
                            case "once":
                                return (arg: any) =>
                                    TAURI_API_EVENT.once(name, arg);
                            case "emit":
                                return (arg: any) =>
                                    TAURI_API_EVENT.emit(name, arg);
                        }
                    },
                });
            },
        },
    );
}
